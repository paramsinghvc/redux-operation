{"version":3,"sources":["makeConstants.ts","augmentReducer.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["export interface IConstants extends Map<string, symbol> {}\n\n/**\n * Outputs a Map of string as keys and Symbols as it's values. For eg\n * {\n *    foo: Symbol('bar'),\n *    baz: Symbol('bax'),\n * }\n * @param constants [['foo', 'bar'], ['baz', 'bax']]\n */\nexport const makeConstantsWithKeys = (constants: string[][]): IConstants =>\n  constants.reduce((constantsMap: IConstants, constant: string[]) => {\n    const [key, val] = constant;\n    constantsMap.set(key, Symbol(val));\n    return constantsMap;\n  }, new Map<string, symbol>());\n\n/**\n * Outputs a Map of string as keys and Symbols as it's values. For eg\n * {\n *    foo: Symbol('foo'),\n *    bar: Symbol('bar'),\n * }\n * @param constants ['foo', 'bar']\n */\nexport const makeConstants = (constants: string[]): IConstants =>\n  constants.reduce((constantsMap: IConstants, constant: string) => {\n    constantsMap.set(constant, Symbol(constant));\n    return constantsMap;\n  }, new Map<string, symbol>());\n","import { IAction } from \"./types\";\nimport { IReducer } from \"./\";\n\nexport const augmentReducer = <S, A extends IAction<symbol | string, any>>(\n  rootReducer: IReducer<any, A>\n) => (reducers: { [k: string]: IReducer<any, A> }) => {\n  return (state: S | undefined, action: A): S => {\n    let nextState: S = rootReducer(state, action);\n    let hasNestedStateChanged = false;\n    for (const [key, reducer] of Object.entries(reducers)) {\n      const prevState = nextState[key];\n\n      const nextStateForKey = reducer(state && state[key], action);\n      if (prevState !== nextStateForKey) {\n        hasNestedStateChanged = true;\n      }\n      nextState[key] = nextStateForKey;\n    }\n    return hasNestedStateChanged ? { ...nextState } : nextState;\n  };\n};\n","import { IAction, IActionFactory } from \"./types\";\nimport { makeConstantsWithKeys } from \"./makeConstants\";\n\nexport * from \"./augmentReducer\";\nexport * from \"./types\";\n\nexport const createActionWithPayload = <T extends symbol | string, P>(\n  type: T\n) => (payload?: P): IAction<T, P> => ({\n  type,\n  payload\n});\n\nconst DELIMITER = `_`;\nexport interface IReduxOperations<T = any> {\n  pending: boolean;\n  success: boolean;\n  failure: boolean;\n  errors: any;\n  payload: T;\n}\n\nexport enum actionFlags {\n  REQUEST = \"REQUEST\",\n  SUCCESS = \"SUCCESS\",\n  FAILURE = \"FAILURE\",\n  CLEAR = \"CLEAR\"\n}\n\nexport const createReduxOperation = (actionName: string) => {\n  /**\n   * Will generate constants map in the form of { SUCCESS: Symbol('FETCH_DATA_SUCCESS') }\n   */\n  const constants = makeConstantsWithKeys(\n    Object.values(actionFlags).map((constant: string) => [\n      constant,\n      `${actionName}${DELIMITER}${constant}`\n    ])\n  );\n\n  /**\n   * Generate redux actions for corresponding intents like request, success, failure\n   */\n  const actions: Array<IActionFactory<symbol, unknown>> = Object.values(\n    actionFlags\n  ).map(constant => createActionWithPayload(<symbol>constants.get(constant)));\n\n  const initialState: IReduxOperations = {\n    pending: false,\n    success: false,\n    failure: false,\n    errors: null,\n    payload: null\n  };\n\n  /**\n   * Create a reducer to be combined with the original one in the parent context\n   * @param state Redux State holding flags\n   * @param action Redux Action\n   */\n  const reducer = (state = initialState, { type, payload = undefined }) => {\n    switch (type) {\n      case constants.get(actionFlags.REQUEST):\n        return { ...state, pending: true, success: false };\n      case constants.get(actionFlags.SUCCESS):\n        return {\n          ...state,\n          success: true,\n          pending: false,\n          payload,\n          failure: false,\n          errors: null\n        };\n      case constants.get(actionFlags.FAILURE):\n        return {\n          ...state,\n          failure: true,\n          pending: false,\n          errors: payload\n        };\n      case constants.get(actionFlags.CLEAR):\n        return { ...initialState };\n      //return { ...state, payload: null, errors: null };\n      default:\n        return state;\n    }\n  };\n  return {\n    constants,\n    actions,\n    reducer\n  };\n};\n"]}